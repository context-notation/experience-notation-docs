{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Experience Notation","text":"<p>Experience Notation is a domain-specific language (DSL) for modelling human experience in a structured, machine-readable format. </p> <p>Originally developed as part of Demoscope.ai, a commercial platform for LLM-powered synthetic user feedback and behavioural insights, Experience Notation has grown into a general-purpose modelling language for complex, human-centred experiences.</p> <p>It is designed to support design research, behavioural prototyping, AI simulation, and service modelling workflows. It enables researchers, designers, policymakers and technologists to represent user journeys, decisions and contextual factors from a human-centred perspective. The language supports personas, actions, branching logic, environmental influences, disruptions, behavioural metrics and more.</p> <p>Experience Notation is open and extensible. View on GitHub</p> <p>Explore Experience Notation: Get Started \u00b7 Core Concepts  \u00b7 EBNF Grammar</p> <p> </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Human- and machine-readable: Write in plain text that both people and systems can understand</li> <li>Structured grammar: Validated by an EBNF specification for syntax correctness and tooling</li> <li>Modular elements: Use <code>Event</code>, <code>Step</code>, <code>Persona</code>, <code>Conditional</code>, <code>Metric</code>, <code>Tag</code>, <code>Ref</code>, <code>Meta</code>, and <code>Disruption</code> blocks to model complexity</li> <li>Support for branching logic: Model decisions and outcomes using <code>IF</code>, <code>THEN</code>, and <code>ELSE</code> constructs</li> <li>Persona modelling: Define users inline or externally using <code>External-Source</code> and enrich them with experience, interaction, and adaptation attributes</li> <li>Environmental context: Capture contextual factors and real-world conditions using <code>Environmental-Factors</code> and <code>Disruption</code></li> <li>Metadata and tagging: Attach key-value pairs and identifiers for filtering, categorisation, and semantic structure</li> <li>Parallel events and referencing: Model concurrent paths using <code>Parallel-Events</code> and interlink steps and events via <code>Ref</code></li> </ul>"},{"location":"#where-experience-notation-could-be-applied","title":"Where Experience Notation Could Be Applied","text":"<p>Designed to address real-world complexity, Experience Notation helps researchers and technologists model and analyse human journeys with clarity and structure. Below are domains where it shows early promise.</p> <ul> <li> <p> AI Safety and Alignment</p> <p>Model coordination failures, edge-case decisions and value conflicts to support safe deployment of LLMs.</p> </li> <li> <p> Government and Policy</p> <p>Simulate public service interactions, emergency response flows and population-wide accessibility impacts.</p> </li> <li> <p> Product Design and Development</p> <p>Map user journeys to identify service friction, accessibility gaps and opportunities for inclusive improvement.</p> </li> <li> <p> Healthcare and Behavioural Change</p> <p>Model goal-driven journeys involving behavioural triggers, disruptions and personal adaptation over time.</p> </li> </ul>"},{"location":"#who-is-it-for","title":"Who Is It For?","text":"<ul> <li>AI safety researchers simulating agent behaviour</li> <li>Designers mapping inclusive service experiences</li> <li>Policy teams evaluating accessibility and impact</li> <li>Developers building human-aware systems</li> </ul> <p>Whether you are modelling risk, prototyping services or benchmarking language models, Experience Notation offers a structured and interpretable approach to reasoning about experience.</p> <p>Join our community to shape the future of human-centred design and AI GitHub Discussions</p>"},{"location":"#support-collaboration","title":"Support &amp; Collaboration","text":"<p>Experience Notation was authored by Nikolaos Maniatis and is maintained by The Cato Bot Company Limited as part of the Context Notation initiative.</p> <p>For questions about: - Using Experience Notation in your projects - Contributing to development - Research collaborations - Commercial support options</p> <p>Feel free to reach out:</p> <p>\ud83d\udce7 hello@context-notation.com \ud83d\udcac GitHub Discussions \ud83c\udf10 context-notation.com</p>"},{"location":"contributing/","title":"Contributing to Experience Notation","text":"<p>Thank you for your interest in contributing to Experience Notation!</p> <p>Experience Notation is an open Domain-Specific Language (DSL) for modelling user journeys, personas, decisions, and contexts in a structured, human-readable format. It is actively maintained and developed as part of both open-source and applied projects like Demoscope.ai.</p>"},{"location":"contributing/#how-you-can-help","title":"How You Can Help","text":"<p>We welcome contributions in the following areas:</p> <ul> <li>Documentation improvements (typos, examples, clarity)</li> <li>Example <code>.expn</code> journeys for new use cases</li> <li>Discussions or feedback on syntax or structure</li> <li>Use case sharing or reports from your own applications</li> </ul> <p>At this time, we are not accepting major syntax changes without prior discussion.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository</li> <li>Create a new branch    Use descriptive names (e.g. <code>fix-typo-validation-guide</code>)</li> <li>Make your changes</li> <li>Submit a pull request (PR) with a clear summary of your contribution</li> </ol> <p>Please keep your PRs focused and small. If you want to propose a larger change, start by opening a Discussion or Issue.</p>"},{"location":"contributing/#repo-structure","title":"Repo Structure","text":"Folder / File Purpose <code>spec/</code> EBNF, JSON Schema, and validation guides <code>examples/</code> Example <code>.expn</code> files <code>README.md</code> Project overview and links"},{"location":"contributing/#coding-and-style-notes","title":"Coding and Style Notes","text":"<ul> <li>Use British English spelling in documentation</li> <li>Follow the <code>.expn</code> formatting as defined by the EBNF grammar</li> <li>Ensure <code>.expn</code> examples are syntactically valid and consistent</li> <li>Document new examples with context and description if possible</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be included under the Apache 2.0 License.</p>"},{"location":"contributing/#support-collaboration","title":"Support &amp; Collaboration","text":"<p>Experience Notation is maintained by The Cato Bot Company Limited as part of the Context Notation initiative.</p> <p>For questions about: - Using Experience Notation in your projects - Contributing to development - Research collaborations - Commercial support options</p> <p>Feel free to reach out:</p> <p>\ud83d\udce7 hello@context-notation.com \ud83d\udcac GitHub Discussions \ud83c\udf10 context-notation.com</p>"},{"location":"contributing/#questions-or-ideas","title":"\ud83d\udcac Questions or Ideas?","text":"<p>Open a GitHub Discussion \u2014 we\u2019d love to hear from you.</p> <p>Thanks again for helping improve Experience Notation!</p>"},{"location":"ai/narrative-generation/","title":"From Journey to Narrative","text":""},{"location":"ai/narrative-generation/#overview","title":"Overview","text":"<p>Experience Notation provides a rich, structured representation of user journeys. With large language models (LLMs), you can convert these formal models into engaging narratives, first-person stories, or UX case studies.</p> <p>This guide explains how to prompt LLMs to generate natural language outputs based on <code>.expn</code> journeys, maintaining fidelity to personas, context, and emotional tone.</p>"},{"location":"ai/narrative-generation/#why-generate-narratives-from-expn","title":"Why Generate Narratives from <code>.expn</code>?","text":"<ul> <li>Translates structured design into human-readable form</li> <li>Useful for stakeholders, usability reporting, or storytelling</li> <li>Captures the lived experience from the perspective of defined personas</li> <li>Helps explore emotional and behavioural impact</li> </ul>"},{"location":"ai/narrative-generation/#prompt-strategy-convert-journey-to-first-person-story","title":"Prompt Strategy: Convert Journey to First-Person Story","text":"<p>Provide the LLM with a valid Experience Notation file and ask it to retell the journey from the perspective of one of the defined personas.</p>"},{"location":"ai/narrative-generation/#example-prompt-journey-to-narrative","title":"Example Prompt: Journey to Narrative","text":"<pre><code>Below is an Experience Notation journey. Write a short first-person story from the point of view of the persona involved in the steps.\n\nExperience Notation:\n\nPersona: Returning Customer\n  Traits: { loyalty=medium, patience=low }\n  Experience: Wants a quick resolution after recent issues\n\nEvent: Reopen Account\n  Step: Visit site\n    User: Returning Customer\n    Action: Opens the homepage\n    UI-Element: Home\n\n  Step: Enter credentials\n    User: Returning Customer\n    Action: Types username and password\n    UI-Element: Login Form\n\n  Step: Locked out\n    User: Returning Customer\n    Action: Encounters account lock message\n    UI-Element: Modal Dialog\n\n  Step: Contact support\n    User: Returning Customer\n    Action: Sends support request\n    UI-Element: Contact Form\n\n  Step: Receives email\n    User: Returning Customer\n    Action: Gets response with unlock link\n    UI-Element: Email\n</code></pre>"},{"location":"ai/narrative-generation/#expected-output","title":"Expected Output","text":"<pre><code>\"I just wanted to check my order status, but when I logged in, I was locked out. The warning popped up without explanation. I felt frustrated \u2014 I\u2019ve had issues before. I used the support form, hoping someone would respond quickly. Thankfully, an email arrived not long after with a link. At least this time it worked.\"\n</code></pre>"},{"location":"ai/narrative-generation/#tips","title":"Tips","text":"<ul> <li>Include only the relevant persona\u2019s actions and traits</li> <li>Maintain first-person voice and align tone with <code>Experience:</code> and <code>Metrics:</code> fields</li> <li>Remove technical syntax from the prompt (e.g., block headers) if needed for more natural phrasing</li> <li>Encourage storytelling that maps step-by-step onto the journey</li> </ul>"},{"location":"ai/narrative-generation/#extended-use-generate-summaries-for-stakeholders","title":"Extended Use: Generate Summaries for Stakeholders","text":"<p>In addition to stories, you can prompt the model to generate:</p> <ul> <li>Executive summaries of the journey</li> <li>Persona-specific walkthroughs</li> <li>Narrative UX case studies</li> </ul>"},{"location":"ai/narrative-generation/#prompt-example-generate-an-empathy-focused-summary","title":"Prompt Example: Generate an Empathy-Focused Summary","text":"<pre><code>Here is an `.expn` journey. Summarise the user's experience with empathy, highlighting their emotional reactions at each step.\n\n[Insert Experience Notation content here]\n</code></pre> <p>This concludes the AI &amp; LLM Integration section. Return to the Tutorials to explore more foundational modelling examples.</p>"},{"location":"ai/roleplay/","title":"Roleplaying Personas with LLMs","text":""},{"location":"ai/roleplay/#overview","title":"Overview","text":"<p>Experience Notation enables LLMs to participate in structured roleplaying by anchoring behaviour, traits, and emotional context within a formal model. This guide focuses on prompting LLMs to act out roles inside journeys, using complete <code>.expn</code> files that include both <code>Persona:</code> blocks and related <code>Event:</code> steps.</p> <p>Unlike basic persona prompts, this approach places characters inside a sequence of experiences \u2014 making their reactions, decisions, and expressions more grounded and meaningful.</p>"},{"location":"ai/roleplay/#why-roleplay-inside-expn","title":"Why Roleplay Inside <code>.expn</code>?","text":"<ul> <li>Adds believability and depth to user modelling</li> <li>Supports simulations, usability walkthroughs, and agent testing</li> <li>Anchors behaviour to concrete steps and UI interactions</li> <li>Promotes consistency across multi-step flows</li> </ul>"},{"location":"ai/roleplay/#prompt-strategy-react-within-a-step","title":"Prompt Strategy: React Within a Step","text":"<p>Ask the model to respond from the perspective of a persona at a specific step of a journey.</p>"},{"location":"ai/roleplay/#example-prompt-simulate-step-experience","title":"Example Prompt: Simulate Step Experience","text":"<pre><code>Here is an Experience Notation journey:\n\nPersona: Apprehensive Student\n  Traits: { tech_savvy=false, age=17 }\n  Experience: Nervous about using online platforms\n\nEvent: Course Onboarding\n  Step: Start registration\n    User: Apprehensive Student\n    Action: Visits course portal\n    UI-Element: Landing Page\n\nPrompt:\nAs the persona above, describe how they feel in the 'Start registration' step.\n</code></pre>"},{"location":"ai/roleplay/#sample-output","title":"Sample Output","text":"<pre><code>\"I\u2019m unsure where to begin. There\u2019s a lot going on visually, and I worry I might click the wrong thing.\"\n</code></pre>"},{"location":"ai/roleplay/#prompt-strategy-roleplay-conversation-from-journey","title":"Prompt Strategy: Roleplay Conversation from Journey","text":"<p>Provide a <code>.expn</code> with at least two personas and a relevant <code>Event:</code> block. Then ask the model to simulate a realistic interaction based on the journey.</p>"},{"location":"ai/roleplay/#example-prompt-dialogue-simulation-from-journey","title":"Example Prompt: Dialogue Simulation from Journey","text":"<pre><code>Experience Notation:\n\nPersona: Support Agent\n  Traits: { empathy=high }\n  Experience: Calm and professional\n\nPersona: Confused User\n  Traits: { tech_savvy=false }\n  Experience: Lost in the navigation process\n\nEvent: Request Assistance\n  Step: User opens help window\n    User: Confused User\n    Action: Clicks on the help button\n    UI-Element: Header Navigation\n\n  Step: Agent engages\n    User: Support Agent\n    Action: Starts a live chat greeting\n    UI-Element: Chat Window\n\nPrompt:\nWrite a realistic conversation between these two personas during the 'Request Assistance' event.\n</code></pre>"},{"location":"ai/roleplay/#sample-output_1","title":"Sample Output","text":"<pre><code>Chat Window \u2013 Live Support Conversation \n\nSupport Agent: \nHello there! You\u2019re through to course support. I\u2019m here to help \u2014 what seems to be the trouble today? \n\nConfused User: \nHi, sorry\u2026 I\u2019m trying to register for a course, but I can\u2019t figure out where to go. The page has so many buttons and I\u2019m not sure what I\u2019m doing. \n\nSupport Agent: \nThat\u2019s absolutely fine \u2014 you\u2019re not the only one who feels that way. I\u2019ll guide you through it step by step. Could you tell me what you see on your screen right now? \n\nConfused User: \nThere\u2019s a big banner at the top, and some menu links. I clicked something earlier and it took me to a different page, but now I can\u2019t find where I was. \n\nSupport Agent: \nNo worries \u2014 let\u2019s get you back on track. Look at the top of the page; do you see a menu item that says \u201cCourses\u201d or \u201cRegister\u201d? Confused User: Yes! There\u2019s a \u201cCourses\u201d tab. \n\nSupport Agent: \nPerfect. Please hover your mouse over that and a drop-down menu should appear. You\u2019ll want to click \u201cNew Student Registration\u201d. \n\nConfused User: \nOkay\u2026 I clicked it. Yes, now it says \u201cStep 1: Create an Account\u201d. \n\nSupport Agent: \nBrilliant \u2014 you\u2019re in the right place. From here, just fill in your name and email, and let me know if anything is unclear along the way. I\u2019m right here with you. \n\nConfused User: \nThank you\u2026 I really wasn\u2019t sure what to do. This helps a lot. \n\nSupport Agent: \nYou\u2019re very welcome \u2014 take your time, and don\u2019t hesitate to message me again if you get stuck. You\u2019ve got this.\n</code></pre>"},{"location":"ai/roleplay/#tips-for-effective-roleplay","title":"Tips for Effective Roleplay","text":"<ul> <li>Always pair <code>Persona:</code> with related <code>Event:</code> and <code>Step:</code> context</li> <li>Use <code>Experience:</code> and <code>Metrics:</code> to influence tone and sentiment</li> <li>Ask the model to focus on a single step or simulate transitions</li> <li>Use <code>Adaptation:</code> to reflect behavioural evolution over time</li> </ul> <p>Continue to Generating Narrative From Journeys to explore how <code>.expn</code> models can be created directly through structured prompt engineering.</p>"},{"location":"ai/structured-prompting/","title":"Generating Experience Notation Journeys with LLMs","text":""},{"location":"ai/structured-prompting/#overview","title":"Overview","text":"<p>Structured prompting refers to crafting LLM prompts that guide the model to return predictable, well-formed outputs. Experience Notation is particularly suited for this purpose thanks to its consistent block syntax, defined EBNF grammar, and human-readability.</p> <p>This guide demonstrates how to prompt large language models to produce <code>.expn</code> journeys directly.</p>"},{"location":"ai/structured-prompting/#why-use-experience-notation-in-prompts","title":"Why Use Experience Notation in Prompts?","text":"<ul> <li>Encourages models to produce structured, multi-step outputs</li> <li>Helps LLMs represent flows, personas, and decision logic</li> <li>Reduces the ambiguity of natural language-only tasks</li> <li>Can be validated against the EBNF grammar</li> </ul>"},{"location":"ai/structured-prompting/#prompt-strategy-providing-structure","title":"Prompt Strategy: Providing Structure","text":"<p>LLMs respond more accurately when the output format is suggested explicitly.</p> <p>Including the full EBNF grammar or a simplified form of the Experience Notation structure can:</p> <ul> <li>Reduce hallucinated fields</li> <li>Improve field ordering and indentation</li> <li>Help the model understand block hierarchy</li> </ul>"},{"location":"ai/structured-prompting/#option-a-full-ebnf-embedding","title":"Option A: Full EBNF Embedding","text":"<p>\ud83d\udca1 Recommended when tokens are not an issue. Include the complete EBNF specification in the prompt for maximum structural fidelity.</p> <pre><code>You are a UX modeller. Generate an Experience Notation journey from the scenario below.\nUse the EBNF grammar that follows to guide the structure.\n\nScenario:\nA new user signs up, verifies their email, and logs into the platform.\n\n---\nEBNF Specification:\n[Insert full EBNF grammar here]\n</code></pre>"},{"location":"ai/structured-prompting/#option-b-minimal-format-hint","title":"Option B: Minimal Format Hint","text":"<p>Use a format hint like this at the end of your prompt:</p> <pre><code>Each step follows this structure:\nStep:\n  User: [persona name]\n  Action: [what the user does]\n  UI-Element: [interface they interact with]\n  Conditional:\n    IF: [condition]\n    THEN: [result]\n    ELSE: [alternative result]\n</code></pre>"},{"location":"ai/structured-prompting/#prompt-example-zero-shot","title":"Prompt Example: Zero-Shot","text":"<pre><code>You are a UX modeller. Describe the following onboarding flow using Experience Notation:\n\nScenario:\nA user visits a website, signs up with email, confirms via email link, and logs in.\n\nReturn the output in `.expn` format. Use clear indentation and syntax blocks.\n</code></pre>"},{"location":"ai/structured-prompting/#sample-output","title":"Sample Output","text":"<pre><code>Journey-Title: Basic Onboarding\nJourney-Description: A user signs up and logs into the platform\n\nEvent: Sign Up\n  Step: Enter details\n    User: New Visitor\n    Action: Fills out name and email\n    UI-Element: Signup Form\n\n  Step: Submit form\n    User: New Visitor\n    Action: Clicks \"Register\"\n    UI-Element: Signup Form\n</code></pre>"},{"location":"ai/structured-prompting/#prompt-example-few-shot-completion","title":"Prompt Example: Few-Shot Completion","text":"<pre><code>Here\u2019s a partial Experience Notation journey. Complete the next event using the same format.\n\nEBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Support Ticket\n\nEvent: Submit Issue\n  Step: Describe problem\n    User: Frustrated Customer\n    Action: Types issue into support form\n    UI-Element: Contact Page\n\n[Continue with next event...]\n</code></pre>"},{"location":"ai/structured-prompting/#tips","title":"Tips","text":"<ul> <li>Always anchor to <code>EBNF-Version: 1.1</code> and <code>Syntax-Version: 1.0</code> if possible</li> <li>Use delimiters or triple backticks to frame outputs</li> <li>Be specific about persona names and UI interactions</li> <li>When tokens allow, embed the full EBNF grammar</li> <li>Start with a minimal version for lightweight prompting, then scale</li> </ul> <p>Continue to Roleplaying Personas to explore how Experience Notation enables agent simulation.</p>"},{"location":"examples/","title":"Example Library Overview","text":"<p>This section provides a curated collection of <code>.expn</code> example files to demonstrate a variety of modelling scenarios using Experience Notation.</p> <p>Each example highlights different features of the language and offers inspiration for constructing structured, expressive user journeys.</p>"},{"location":"examples/#quick-navigation","title":"Quick Navigation","text":"Example Description Simple Onboarding A minimal journey showing login and signup steps User Decision Flow Demonstrates conditional logic and branching outcomes Advanced Personas Uses personas with traits, metrics, and reactions External Personas Models external personas using <code>External-Source:</code> blocks Contextual Factors Incorporates <code>Disruption:</code> and <code>Environmental-Factors:</code> to reflect real-world frictions Modular Journeys Uses <code>Ref:</code> and <code>Tag:</code> to link modular content Comprehensive CX Journey A rich, multi-event customer experience with full syntax coverage"},{"location":"examples/#file-format","title":"File Format","text":"<p>All examples follow the EBNF structure described in the language specification. Where applicable, comments are included inline to clarify design choices.</p> <p>These examples can be adapted, extended, or modularised for your own domain-specific applications.</p>"},{"location":"examples/#how-to-use","title":"How to Use","text":"<ul> <li>Copy and edit them as a starting point for your own <code>.expn</code> files</li> <li>Compare styles and scenarios to see how different constructs are applied</li> <li>Pair them with the Validation Guide to check correctness</li> </ul> <p>Continue with any example to explore specific modelling approaches in action.</p>"},{"location":"examples/context/","title":"Example: Contextual Factors","text":""},{"location":"examples/context/#purpose","title":"Purpose","text":"<p>This example shows how to incorporate context-aware elements such as disruptions, environment shifts, and unexpected conditions using <code>Disruption:</code> and <code>Environmental-Factors:</code>.</p>"},{"location":"examples/context/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Use of <code>Disruption:</code> to model friction in an experience</li> <li>Use of <code>Environmental-Factors:</code> to describe influencing context</li> <li>Use of <code>Tag:</code> for quick categorisation</li> </ul>"},{"location":"examples/context/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Disrupted Commute\nJourney-Description: Captures how external conditions affect a journey\n\nEvent: Begin Journey\n  Step: Check train schedule\n    User: Commuter\n    Action: Opens train app\n    UI-Element: Mobile App\n    Environmental-Factors: { weather=\"snow\", network=\"unstable\" }\n    Tag: [planning]\n\n  Step: Receive delay alert\n    User: Commuter\n    Action: Gets push notification\n    UI-Element: Mobile App\n    Disruption: Train service suspended due to weather\n    Tag: [friction, alert]\n\nEvent: Reroute Journey\n  Step: Search alternate routes\n    User: Commuter\n    Action: Opens maps and checks ride options\n    UI-Element: Navigation App\n\n  Step: Book ride-share\n    User: Commuter\n    Action: Reserves car\n    UI-Element: Ride-share App\n    Environmental-Factors: { surge_pricing=true }\n</code></pre>"},{"location":"examples/context/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to model situational and external variables</li> <li>How to communicate breakdowns and recoveries</li> <li>How <code>Tag:</code> and <code>Environmental-Factors:</code> enhance semantic clarity</li> </ul> <p>Continue to Modular Journeys to explore structuring experiences across files or reusable patterns.</p>"},{"location":"examples/decision-flow/","title":"Example: User Decision Flow","text":""},{"location":"examples/decision-flow/#purpose","title":"Purpose","text":"<p>This example demonstrates the use of conditional logic in a decision-making journey. It showcases how to structure <code>Conditional:</code> blocks using <code>IF</code>, <code>THEN</code>, and <code>ELSE</code> clauses to capture branching outcomes.</p>"},{"location":"examples/decision-flow/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Use of <code>Conditional:</code> inside steps</li> <li>Modelling different outcomes for success and failure</li> <li>Clear structuring of alternate flows</li> </ul>"},{"location":"examples/decision-flow/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Decision Flow\nJourney-Description: A user completes an action that can succeed or fail\n\nEvent: Submit Application\n  Step: Complete form\n    User: Applicant\n    Action: Enters required details\n    UI-Element: Application Form\n\n  Step: Submit form\n    User: Applicant\n    Action: Clicks \"Submit\"\n    UI-Element: Application Form\n    Conditional:\n      IF: required fields are missing\n      THEN: show validation error\n      ELSE: proceed to confirmation\n\nEvent: Confirmation\n  Step: Show success screen\n    User: Applicant\n    Action: Sees confirmation message\n    UI-Element: Web Page\n</code></pre>"},{"location":"examples/decision-flow/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to embed conditionals within steps</li> <li>How to model different user outcomes clearly and readably</li> <li>Where to place conditional logic in a flow</li> </ul> <p>Continue to Advanced Personas for richer modelling of individuals and their experiences.</p>"},{"location":"examples/external-personas/","title":"Example: External Personas","text":""},{"location":"examples/external-personas/#purpose","title":"Purpose","text":"<p>This example demonstrates how to reference personas defined in external sources. It is useful for distributed modelling where shared users or roles appear across multiple <code>.expn</code> files or systems.</p>"},{"location":"examples/external-personas/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Use of <code>External-Source:</code> to link to external persona definitions</li> <li>Referencing remote personas within steps</li> <li>Maintaining consistency across modular experiences</li> </ul>"},{"location":"examples/external-personas/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: External Persona Integration\nJourney-Description: Uses an externally defined user role in the local journey\n\nExternal-Source: https://example.com/personas/healthcare-personas.expn\n\nEvent: Access Medical Record\n  Step: Open portal\n    User: GP\n    Action: Logs into patient management system\n    UI-Element: Web Portal\n\n  Step: View record\n    User: GP\n    Action: Opens recent patient file\n    UI-Element: Patient Records Viewer\n</code></pre>"},{"location":"examples/external-personas/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to model journeys where users are defined elsewhere</li> <li>How to link <code>.expn</code> files with consistent referencing</li> <li>How to keep personas modular and reusable</li> </ul> <p>Continue to Contextual Factors to see how external influences and disruptions can be represented in a journey.</p>"},{"location":"examples/full-journey/","title":"Example: Comprehensive CX Journey","text":""},{"location":"examples/full-journey/#purpose","title":"Purpose","text":"<p>This example brings together multiple features of Experience Notation into a single, complex customer support journey. It is ideal for illustrating long-form modelling with branching, personas, and contextual variables.</p>"},{"location":"examples/full-journey/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Multi-event narrative with consistent flow</li> <li>Use of personas with traits and adaptations</li> <li>Conditional logic, tags, and metrics</li> <li>Contextual and environmental annotations</li> </ul>"},{"location":"examples/full-journey/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Customer Support Lifecycle\nJourney-Description: A user experiences an issue, seeks support, and receives resolution\n\nPersona: Frustrated Customer\n  Traits: { loyalty=\"medium\", tech_savvy=true }\n  Experience: Anxious due to unexpected service interruption\n  Metrics: { mood=\"low\" }\n\nEvent: Detect Problem\n  Step: App crash\n    User: Frustrated Customer\n    Action: Attempts to open app, but it crashes\n    UI-Element: Mobile App\n    Disruption: App fails on launch\n    Tag: [issue, crash]\n\nEvent: Seek Help\n  Step: Try self-service\n    User: Frustrated Customer\n    Action: Searches FAQ section\n    UI-Element: Help Centre\n\n  Step: Start chat\n    User: Frustrated Customer\n    Action: Opens live chat for support\n    UI-Element: Chat Widget\n    Metrics: { patience=low }\n\nEvent: Troubleshooting\n  Step: Submit ticket\n    User: Frustrated Customer\n    Action: Describes issue and attaches screenshot\n    UI-Element: Support Form\n\n  Step: Response received\n    User: Support Agent\n    Action: Reviews ticket and sends resolution steps\n    UI-Element: Support Dashboard\n\n  Persona: Frustrated Customer\n    Adaptation: Calms down after receiving clear instructions\n    Experience: Appreciates responsiveness\n    Metrics: { mood=\"recovering\" }\n\nEvent: Follow-up\n  Step: Confirm resolution\n    User: Frustrated Customer\n    Action: Marks issue as resolved\n    UI-Element: Ticket Portal\n    Tag: [follow-up]\n\n  Step: Feedback\n    User: Frustrated Customer\n    Action: Rates the experience\n    UI-Element: Feedback Form\n    Metrics: { satisfaction=8 }\n</code></pre>"},{"location":"examples/full-journey/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to combine multiple features in one cohesive <code>.expn</code> journey</li> <li>How to manage emotional and technical dimensions through personas</li> <li>How to model end-to-end lifecycle experiences</li> </ul> <p>This concludes the curated examples library. Return to the Examples Overview to explore more scenarios or revisit previous examples.</p>"},{"location":"examples/modular/","title":"Example: Modular Journeys","text":""},{"location":"examples/modular/#purpose","title":"Purpose","text":"<p>This example demonstrates how to compose journeys from reusable parts. Using <code>Ref:</code> and <code>Tag:</code>, you can construct modular journeys that reference other models or templates.</p>"},{"location":"examples/modular/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Use of <code>Ref:</code> to reference external events or components</li> <li>Use of <code>Tag:</code> to classify and filter journey elements</li> <li>Reusable structure and modular organisation</li> </ul>"},{"location":"examples/modular/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Modular Checkout Flow\nJourney-Description: A checkout process built from shared journey components\n\nExternal-Source: https://example.com/common/checkout-base.expn\n\nEvent: Cart Review\n  Step: Review items\n    User: Shopper\n    Action: Reviews cart contents\n    UI-Element: Cart Page\n    Tag: [cart, pre-checkout]\n\n  Step: Proceed to checkout\n    User: Shopper\n    Action: Clicks checkout button\n    UI-Element: Cart Page\n\nEvent: Checkout Flow\n  Ref: common-checkout-base\n  Tag: [reused, checkout]\n\nEvent: Post-Purchase\n  Step: Show thank you message\n    User: Shopper\n    Action: Sees confirmation screen\n    UI-Element: Confirmation Page\n    Tag: [post-checkout]\n</code></pre>"},{"location":"examples/modular/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to structure a journey using referenced components</li> <li>How <code>Ref:</code> allows for cleaner, more maintainable flows</li> <li>How tagging improves navigation, filtering, and classification</li> </ul> <p>Continue to Comprehensive CX Journey to see how all features come together in a complex scenario.</p>"},{"location":"examples/onboarding-flow/","title":"Example: Simple Onboarding","text":""},{"location":"examples/onboarding-flow/#purpose","title":"Purpose","text":"<p>This example demonstrates a basic onboarding flow, where a new user signs up and logs into a platform. It shows how to structure events and steps with minimal logic or metadata.</p>"},{"location":"examples/onboarding-flow/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Sequential events and steps</li> <li>Clear use of <code>User:</code>, <code>Action:</code>, and <code>UI-Element:</code></li> <li>Basic journey structure and indentation</li> </ul>"},{"location":"examples/onboarding-flow/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Onboarding Flow\nJourney-Description: A user signs up and logs in for the first time\n\nEvent: User Registration\n  Step: Fill out form\n    User: New Visitor\n    Action: Enters name, email, and password\n    UI-Element: Registration Form\n\n  Step: Submit registration\n    User: New Visitor\n    Action: Clicks \"Register\"\n    UI-Element: Registration Form\n\nEvent: Email Confirmation\n  Step: Confirm email\n    User: New Visitor\n    Action: Clicks link in confirmation email\n    UI-Element: Email Client\n\nEvent: First Login\n  Step: Enter credentials\n    User: New User\n    Action: Types email and password\n    UI-Element: Login Form\n\n  Step: Access dashboard\n    User: New User\n    Action: Sees welcome screen\n    UI-Element: Dashboard\n</code></pre>"},{"location":"examples/onboarding-flow/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to model a multi-step user journey using the basic syntax</li> <li>How to distinguish between events and steps</li> <li>Naming and structuring user actions in a linear flow</li> </ul> <p>Continue to User Decision Flow to explore conditional logic.</p>"},{"location":"examples/persona-showcase/","title":"Example: Advanced Personas","text":""},{"location":"examples/persona-showcase/#purpose","title":"Purpose","text":"<p>This example demonstrates how to represent multiple personas within a journey, including global and inline definitions. It shows how traits, metrics, and emotional responses can be modelled in Experience Notation.</p>"},{"location":"examples/persona-showcase/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Global persona definitions</li> <li>Inline persona experiences within events</li> <li>Use of <code>Traits:</code>, <code>Metrics:</code>, <code>Experience:</code>, and <code>Adaptation:</code></li> </ul>"},{"location":"examples/persona-showcase/#annotated-example","title":"Annotated Example","text":"<pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Persona Showcase\nJourney-Description: Demonstrates persona-driven modelling across multiple events\n\nPersona: Knowledge Seeker\n  Traits: { expertise=\"intermediate\", patience=\"moderate\" }\n  Experience: Curious but cautious\n  Metrics: { confidence=6 }\n\nEvent: Search for Help\n  Step: Submit question\n    User: Knowledge Seeker\n    Action: Types query into search bar\n    UI-Element: Support Portal\n\n  Step: Read article\n    User: Knowledge Seeker\n    Action: Skims through documentation\n    UI-Element: Help Article\n\n  Persona: Knowledge Seeker\n    Experience: Becomes slightly frustrated\n    Adaptation: Skips to FAQ section\n    Metrics: { patience=low }\n\nEvent: Contact Support\n  Step: Open chat window\n    User: Knowledge Seeker\n    Action: Starts live chat with support agent\n    UI-Element: Live Chat Interface\n\n  Persona: Knowledge Seeker\n    Experience: Feels reassured by human interaction\n    Metrics: { confidence=8 }\n</code></pre>"},{"location":"examples/persona-showcase/#what-you-can-learn","title":"What You Can Learn","text":"<ul> <li>How to structure reusable personas outside event blocks</li> <li>How to express internal states and changes in a step-by-step journey</li> <li>When to apply <code>Metrics:</code> and <code>Adaptation:</code> to reflect user shifts</li> </ul> <p>Continue to External Personas for linking users across systems or data sources.</p>"},{"location":"getting-started/core-concepts/","title":"Core Concepts","text":"<p>Experience Notation is built around composable, hierarchical elements that describe human journeys in context.</p> <p>This section introduces the core syntax and semantics of the language.</p>"},{"location":"getting-started/core-concepts/#overview-of-key-elements","title":"Overview of Key Elements","text":"Element Description <code>Event:</code> A major checkpoint or segment in the journey <code>Step:</code> A specific action, interaction, or system response <code>Persona:</code> A user or stakeholder involved in the journey (inline or external) <code>User:</code> The actor performing the step <code>Action:</code> What the user does (or attempts to do) <code>UI-Element:</code> The interface or channel involved <code>Conditional:</code> Decision logic using <code>IF... THEN... [ELSE...]</code> <code>Disruption:</code> A failure, interruption, or breakdown <code>Environmental-Factors:</code> Broader contextual influences <code>Parallel-Events:</code> Concurrent experiences occurring alongside the main flow <code>Metrics:</code> Numeric, boolean, or textual indicators attached to personas or steps <code>Meta:</code> Arbitrary metadata in <code>key=value</code> format <code>Tag:</code> Categorical labels used for filtering or analysis <code>Ref:</code> Internal links to previously defined elements using unique IDs"},{"location":"getting-started/core-concepts/#file-header","title":"File Header","text":"<p>Each <code>.expn</code> file begins with required headers:</p> <p><pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Booking Flow with Delay\nJourney-Description: User journey through online ticket booking with service outage\n</code></pre> These headers define the file\u2019s syntax version and purpose.</p>"},{"location":"getting-started/core-concepts/#structure-and-indentation","title":"Structure and Indentation","text":"<p>Experience Notation uses indentation for structure. For example:</p> <pre><code>Event: Service Outage\n  ID: EVT-003\n  Step: Try to Access Account\n    User: Returning Customer\n    Action: Attempts to log in\n    UI-Element: Login Form\n    Conditional:\n      IF: Password incorrect\n      THEN: Display error\n      ELSE: Proceed to dashboard\n  Disruption: System latency causes login delay\n</code></pre> <ul> <li>Event-level indentation: 2 spaces</li> <li>Step-level and persona-level: 4 spaces</li> <li>Nested logic and blocks: 6+ spaces as needed</li> </ul>"},{"location":"getting-started/core-concepts/#reuse-and-modularity","title":"Reuse and Modularity","text":"<p>Experience Notation supports modular thinking:</p> <ul> <li>Use <code>ID:</code> to name key elements</li> <li>Use <code>Ref:</code> to point to them later</li> <li>Global <code>Personas:</code> can be declared once and reused across the document</li> <li>External personas can be linked via <code>External-Source:</code></li> </ul>"},{"location":"getting-started/core-concepts/#best-practices","title":"Best Practices","text":"<ul> <li>Use comments (<code>#</code>) to annotate files during drafting</li> <li>Validate files against the JSON Schema</li> <li>Keep indentation consistent </li> <li>Use metrics and metadata to enable analysis</li> <li>Design with real-world behaviour and breakdowns in mind</li> </ul> <p>Continue to Quick Example for a complete working journey.</p>"},{"location":"getting-started/example/","title":"Quick Example","text":"<p>Here is a minimal Experience Notation document:</p> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Simple User Onboarding\nJourney-Description: A basic journey for new user registration and login.\n\nEvent: Account Creation\n  ID: EVT-001\n  Step: User Registration\n    User: New User\n    Action: Fills out form\n    UI-Element: Registration Page\n  Step: Email Verification\n    User: New User\n    Action: Clicks email link\n    UI-Element: Email Client\n  Persona: Referenced Persona\n    External-Source: https://example.com/personas/user-v1.json\n\nEvent: First Login\n  ID: EVT-002\n  Step: Initial Login\n    User: Registered User\n    Action: Logs in\n    UI-Element: Login Page\n  Persona: Excited New User\n    Experience: Feels welcomed and confident\n    Metrics: {\"satisfaction\": 8, \"confidence\": \"High\"}\n</code></pre> <p>This shows:</p> <ul> <li>Two events with clear IDs</li> <li>Steps with associated users, actions, and UI context</li> <li>Both external and inline personas</li> <li>Use of metrics to capture user experience</li> </ul> <p>You can expand this with conditionals, disruptions, metadata, and more.</p>"},{"location":"getting-started/what-is-expn/","title":"What Is Experience Notation?","text":"<p>Experience Notation is a domain-specific language (DSL) for describing complex human journeys, decisions, and disruptions using structured text. It is designed to be both human-readable and machine-parseable, enabling deeper understanding, simulation, and integration of real-world experience into digital systems.</p> <p>It empowers researchers, designers, technologists, and policymakers to represent human behaviour with clarity, context, and structure.</p>"},{"location":"getting-started/what-is-expn/#why-experience-notation-exists","title":"Why Experience Notation Exists","text":"<p>Modern services and systems are often complex, fragmented, and unpredictable. Traditional tools for mapping experience are often:</p> <ul> <li>Visually rich but semantically thin</li> <li>Inconsistent in format</li> <li>Hard to validate or simulate</li> <li>Disconnected from engineering and data workflows</li> </ul> <p>Experience Notation solves these problems by providing:</p> <ul> <li>A grammar-based, validated structure for defining experiences</li> <li>Shared vocabulary across roles and disciplines</li> <li>A format that is portable, versionable, and extensible</li> <li>Compatibility with automation, simulation, and AI workflows</li> </ul>"},{"location":"getting-started/what-is-expn/#what-makes-it-different","title":"What Makes It Different?","text":"Feature Traditional Journey Maps Experience Notation Visual design tool Yes Optional (can be visualised) Human-readable Yes Yes Machine-readable Rarely Yes (validated by grammar and schema) Branching and logic No Yes (<code>IF</code>, <code>THEN</code>, <code>ELSE</code>) Structured personas No Yes (<code>Persona</code>, <code>Metrics</code>, <code>Adaptation</code>) Simulatable and testable Rare Yes Version-controlled (text-based) No Yes (<code>.expn</code> format)"},{"location":"getting-started/what-is-expn/#use-cases-across-domains","title":"Use Cases Across Domains","text":"Sector Applications Design &amp; UX Structured journey maps, service blueprints, inclusive design Public Sector Modelling citizen experiences, accessibility testing Policy &amp; Research Translating qualitative data into scenario models Product Teams Edge case documentation, QA, design-to-dev handoffs AI &amp; Simulation Ethical testing, scenario training, persona modelling Education Teaching systems thinking, behavioural modelling"},{"location":"getting-started/what-is-expn/#experience-notation-in-practice","title":"Experience Notation in Practice","text":"<p>A typical <code>.expn</code> file might include:</p> <ul> <li>Structured events and steps</li> <li>Personas and their experiences</li> <li>Metrics like satisfaction or confidence</li> <li>Conditional logic to explore \"what if\" flows</li> <li>Context like disruption, environment, and parallel events</li> </ul> <p>You can write .expn files by hand in any text editor, or prompt a large language model (LLM) to generate them from natural language descriptions. Once written, you can validate the documents using the Experience Notation grammar and the official tools and schema (coming soon).</p>"},{"location":"getting-started/what-is-expn/#next-step","title":"Next Step","text":"<p>Now that you know what Experience Notation is, continue to:</p> <p>\ud83d\udc49 Core Concepts to learn the building blocks.</p>"},{"location":"reference/citation/","title":"Citation","text":"<p>If you use the Experience Notation Schema in academic or technical work, please cite:</p> <p>Nikolaos Maniatis. Experience Notation Schema (v1.1). https://schemas.experience-notation.com/experience-notation.schema@v1.1 Available at: https://github.com/context-notation/experience-notation Licensed under Apache 2.0. Maintained by The Cato Bot Company Limited.</p>"},{"location":"reference/citation/#apa-citation","title":"APA Citation","text":"<p>Maniatis, N. (2025). Experience Notation Schema (v1.1). https://github.com/context-notation/experience-notation</p>"},{"location":"reference/citation/#schema-identifier","title":"Schema Identifier","text":"<p>You may use the following schema URI in your <code>.json</code> files:</p> <pre><code>$schema: https://schemas.experience-notation.com/experience-notation.schema@v1.1\n</code></pre> <p>For more information, visit the GitHub repository.</p>"},{"location":"reference/glossary/","title":"Glossary","text":"<p>This glossary defines key terms used throughout the Experience Notation documentation.</p>"},{"location":"reference/glossary/#adaptation","title":"Adaptation","text":"<p>A narrative or behavioural description of how a persona may change over the course of a journey. Optional within a <code>Persona:</code> block.</p>"},{"location":"reference/glossary/#conditional","title":"Conditional","text":"<p>A branching block used within a <code>Step:</code> that describes alternate outcomes depending on a stated condition, using <code>IF</code>, <code>THEN</code>, and <code>ELSE</code> fields.</p>"},{"location":"reference/glossary/#ebnf-extended-backusnaur-form","title":"EBNF (Extended Backus\u2013Naur Form)","text":"<p>A formal notation used to describe the syntax rules of Experience Notation. Used to guide both human authors and automated validation.</p>"},{"location":"reference/glossary/#event","title":"Event","text":"<p>A major unit of experience within a journey, composed of one or more sequential <code>Step:</code> blocks.</p>"},{"location":"reference/glossary/#experience","title":"Experience","text":"<p>A freeform emotional or contextual description of a persona\u2019s state at the beginning of the journey.</p>"},{"location":"reference/glossary/#external-source","title":"External-Source","text":"<p>A URL reference to an external resource or document relevant to the journey context.</p>"},{"location":"reference/glossary/#journey","title":"Journey","text":"<p>A top-level <code>.expn</code> file representing a structured user experience, composed of metadata, personas, and one or more events.</p>"},{"location":"reference/glossary/#metrics","title":"Metrics","text":"<p>Quantitative or qualitative persona state values (e.g. <code>mood=low</code>, <code>energy=medium</code>). Used to enrich simulation or roleplay.</p>"},{"location":"reference/glossary/#persona","title":"Persona","text":"<p>A named user or agent defined in the <code>.expn</code> file. Includes <code>Traits:</code>, <code>Experience:</code>, <code>Metrics:</code>, and optionally <code>Adaptation:</code>.</p>"},{"location":"reference/glossary/#step","title":"Step","text":"<p>An individual action taken within an <code>Event:</code>. Includes subfields such as <code>User:</code>, <code>Action:</code>, <code>UI-Element:</code>, and optionally <code>Conditional:</code>.</p>"},{"location":"reference/glossary/#tag","title":"Tag","text":"<p>A keyword or category assigned to a <code>Step:</code> to support indexing, classification, or filtering.</p>"},{"location":"reference/glossary/#traits","title":"Traits","text":"<p>Key\u2013value pairs that define behavioural or demographic characteristics of a persona.</p>"},{"location":"reference/glossary/#ui-element","title":"UI-Element","text":"<p>The interface component or system element that the persona interacts with in a given step.</p>"},{"location":"reference/glossary/#user","title":"User","text":"<p>The name of the persona involved in a given <code>Step:</code>.</p> <p>If you're looking for syntax specifics, see the EBNF Grammar or JSON Schema Reference.</p>"},{"location":"spec/ebnf/","title":"EBNF Grammar","text":"<p>This page presents the full formal grammar for Experience Notation, written in Extended Backus\u2013Naur Form (EBNF). It defines the allowed structure and nesting of all constructs in a <code>.expn</code> file.</p> <p>Experience Notation is whitespace-sensitive, with structure indicated through indentation. This grammar supports both human readability and precise programmatic parsing.</p>"},{"location":"spec/ebnf/#grammar-version","title":"Grammar Version","text":"<ul> <li>EBNF-Version: 1.1  </li> <li>Syntax-Version: 1.0</li> </ul>"},{"location":"spec/ebnf/#overview","title":"Overview","text":"<p>The grammar below defines the syntax rules for:</p> <ul> <li>File headers</li> <li>Events and steps</li> <li>Personas and actions</li> <li>Conditional logic</li> <li>Disruptions and environment</li> <li>Tagging, metadata, and referencing</li> </ul> <p>You can use this grammar to:</p> <ul> <li> <p>Build parsers or validators   Implement tooling that programmatically parses, validates, or converts <code>.expn</code> files.</p> </li> <li> <p>Understand the structure of Experience Notation documents   The EBNF acts as a definitive reference for authors, reviewers, and tool developers working with the DSL.</p> </li> <li> <p>Guide large language models (LLMs)   Use the grammar as a structured prompt to help LLMs generate syntactically valid <code>.expn</code> journeys from natural language descriptions.</p> </li> </ul>"},{"location":"spec/ebnf/#ebnf-definition","title":"EBNF Definition","text":"<pre><code># Metadata:\n#   Title: Experience Notation\n#   EBNF-Version: 1.1\n#   Syntax-Version: 1.0 \n#   Author: Nikolaos Maniatis\n#   Copyright \u00a9 2025 The Cato Bot Company Limited\n#   Licence: Apache 2.0\n#   Repository: https://github.com/context-notation/experience-notation\n\n\njourney             = grammar_version , header , { blank | top_level } ;\n# A journey document starts with the grammar version and a header,\n# followed by any number of blank lines or top-level components (events or global personas).\n\ngrammar_version     = \"EBNF-Version:\" , wsp , version , nl ;\n# Specifies which version of the Experience Notation grammar this document uses.\n\nheader              = \"Syntax-Version:\" , wsp , version , nl ,\n                      \"Journey-Title:\" , wsp , text , nl ,\n                      \"Journey-Description:\" , wsp , text , nl ;\n# Declares the syntax version for this specific journey instance,\n# and provides a title and description for human readability.\n\ntop_level           = event | persona_global ;\n# Top-level elements can be Events or globally defined Personas.\n\n# ----- EVENTS ---------------------------------------------\nevent               = \"Event:\" , wsp , text , nl , { indented_event_child } ;\n# Each event begins with a title and can include indented children:\n# steps, personas, metadata, tags, conditionals, etc.\n\nindented_event_child = ind1 , ( id_line | tag_line | env_factors | parallel_events |\n                                disruption | step | persona_block | conditional |\n                                reference | comment ) ;\n# Event children must be indented and may include metadata, environmental context,\n# steps, personas, branching logic, references, or comments.\n\nenv_factors         = \"Environmental-Factors:\" , wsp , text , nl ;\n# Describes environmental or contextual factors affecting the event.\n\nparallel_events     = \"Parallel-Events:\" , wsp , csv(text) , nl ;\n# Lists other events that occur concurrently with this one.\n\ndisruption          = \"Disruption:\" , wsp , text , nl ;\n# Describes any interruption, exception, or breakdown within the journey.\n\n# ----- STEPS ----------------------------------------------\nstep                = ind1 , \"Step:\" , wsp , text , nl ,\n                      { ind2 , ( id_line | tag_line | user_role | action |\n                                 ui_element | conditional | persona_block | reference ) } ;\n# A step is a sequence within an event.\n# It contains further indented items such as user actions, roles, conditions, and personas.\n# Step must include at least one user_role and one action.\n\nuser_role           = \"User:\" , wsp , text , nl ;\n# Declares the user or actor performing this step.\n\naction              = \"Action:\" , wsp , text , nl ;\n# Describes what the user or system does.\n\nui_element          = \"UI-Element:\" , wsp , text , nl ;\n# Specifies the part of the interface involved in the step.\n\n# ----- PERSONA (inline, context-specific) -----------------\npersona_block       = ind2? , \"Persona:\" , wsp , text , nl ,\n                      { ind3 , ( id_line | meta_line | experience |\n                                 metrics | interaction | adaptation |\n                                 reference | external_source_line ) } ;\n# Defines a persona relevant to this event or step.\n# May include structured metadata, behavioural traits, metrics, context, or an external reference.\n\nexperience          = \"Experience:\" , wsp , text , nl ;\ninteraction         = \"Interaction:\" , wsp , text , nl ;\nadaptation          = \"Adaptation:\" , wsp , text , nl ;\n# Narrative descriptions of how the persona engages, responds, or adapts during this point.\n\nmetrics             = \"Metrics:\" , wsp , \"{\" , wsp? , metric_pairs , wsp? , \"}\" , nl ;\n# Captures performance or behavioural metrics in key=value format.\n\n# ----- IDENTIFIERS &amp; TAGS ---------------------------------\nid_line             = \"ID:\" , wsp , identifier , nl ;\ntag_line            = \"Tag:\" , wsp , csv(identifier) , nl ;\n# Used to uniquely identify or categorise events, steps, or personas.\n\n# ----- META BLOCK -----------------------------------------\nmeta_line           = \"Meta:\" , wsp , \"{\" , wsp? , meta_pairs , wsp? , \"}\" , nl ;\nmeta_pairs          = meta_pair , { \",\" , wsp? , meta_pair } ;\nmeta_pair           = identifier , \"=\" , text ;\n# Provides structured, arbitrary metadata using key=value pairs.\n\n# ----- METRICS -------------------------------------------\nmetric_pairs        = metric_pair , { \",\" , wsp? , metric_pair } ;\nmetric_pair         = metric_key , \"=\" , metric_value ;\nmetric_key          = identifier ;\nmetric_value        = number | text ;\n# Metrics can be textual or numeric.\n\n# ----- CONDITIONALS ---------------------------------------\nconditional         = \"Conditional:\" , wsp , conditional_expr , nl ;\nconditional_expr    = if_then | if_then_else ;\nif_then             = \"IF\" , wsp , text , wsp , \"THEN\" , wsp , text ;\nif_then_else        = if_then , wsp , \"ELSE\" , wsp , text ;\n# Support for basic branching logic with optional ELSE clause.\n\n# ----- REFERENCES ----------------------------------------\nreference           = \"Ref:\" , wsp , identifier , nl ;\n# Allows referencing other elements by their ID.\n\n# ----- EXTERNAL REFERENCES --------------------------------\nexternal_source_line = \"External-Source:\" , wsp , text , nl ;\n# Specifies an external URI or identifier for a persona definition.\n# This allows linking to persona data managed outside the current .expn document.\n\n# ----- GLOBAL PERSONAS ------------------------------------\npersona_global      = \"Persona:\" , wsp , text , nl ,\n                      { ind1 , ( id_line | meta_line | experience |\n                                 metrics | interaction | adaptation |\n                                 reference | external_source_line ) } ;\n# Allows personas to be declared globally, not just within specific steps or events.\n\n# ----- LEXICAL STRUCTURE ----------------------------------\nidentifier          = alpha , { alpha | digit | \"_\" } ;\nalpha               = \"A\"...\"Z\" | \"a\"...\"z\" ;\ndigit               = \"0\"...\"9\" ;\nany_char            = ? any valid character except control characters ? ;\nversion             = digit , \".\" , digit ;\n# A basic version format, e.g., 1.0\n\ntext                = { any_char - nl } ;\n# Any string excluding newlines.\n\nnumber              = [ \"-\" ] , digit , { digit } , [ \".\" , digit , { digit } ] ;\n# Numeric values for metrics and other quantifiable data.\n\ncsv(X)              = X , { \",\" , wsp? , X } ;\n# Helper function for comma-separated lists of values.\n\nind1                = 2*\" \" ;\nind2                = 4*\" \" ;\nind3                = 6*\" \" ;\n# Indentation levels (2, 4, 6 spaces) to structure hierarchy.\n\nwsp                 = \" \" | \"\\t\" ;\nnl                  = \"\\n\" | \"\\r\\n\" ;\nblank               = nl ;\n</code></pre>"},{"location":"spec/ebnf/#notes","title":"Notes","text":"<ul> <li>Indentation is significant and should be consistent (spaces, not tabs)</li> <li>Comments start with <code>#</code> and may appear on any line</li> <li>String values can be quoted or unquoted, unless whitespace or symbols are used</li> <li>Reserved keywords (like <code>Event:</code>, <code>Step:</code>, <code>IF:</code>) must appear exactly as defined</li> </ul> <p>For structural constraints and field-level types, refer to the JSON Schema Reference.</p>"},{"location":"spec/json-schema/","title":"JSON Schema Reference","text":"<p>This page provides a human-readable breakdown of the Experience Notation JSON Schema.</p> <p>The schema defines the structure, types, and validation rules for <code>.expn</code> documents. It is used by tooling to ensure consistency, correctness, and compatibility across versions.</p>"},{"location":"spec/json-schema/#schema-metadata","title":"Schema Metadata","text":"<ul> <li>$schema: https://json-schema.org/draft/2020-12/schema</li> <li>Title: Experience Notation Document</li> <li>Description: A structured journey definition using the Experience Notation (expn) format, conforming to EBNF Version 1.1 and JSON Schema Draft 2020-12.</li> <li>Version: 1.1.0</li> </ul>"},{"location":"spec/json-schema/#top-level-properties","title":"Top-Level Properties","text":""},{"location":"spec/json-schema/#ebnfversion","title":"<code>ebnfVersion</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The version of the Experience Notation grammar this document conforms to (e.g., '1.1'). Corresponds to 'grammar_version' in EBNF.</li> </ul>"},{"location":"spec/json-schema/#syntaxversion","title":"<code>syntaxVersion</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The version of the Experience Notation syntax used in this journey (e.g., '1.0'). Corresponds to 'Syntax-Version' in EBNF header.</li> </ul>"},{"location":"spec/json-schema/#journeytitle","title":"<code>journeyTitle</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: A concise and descriptive name for the journey. Corresponds to 'Journey-Title' in EBNF header.</li> </ul>"},{"location":"spec/json-schema/#journeydescription","title":"<code>journeyDescription</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: An overview of the journey's purpose, scope, and context. Corresponds to 'Journey-Description' in EBNF header.</li> </ul>"},{"location":"spec/json-schema/#events","title":"<code>events</code>","text":"<ul> <li>Type: <code>array</code></li> <li>Description: A list of events (major checkpoints or phases) in the journey. Corresponds to 'event' in EBNF.</li> </ul>"},{"location":"spec/json-schema/#personas","title":"<code>personas</code>","text":"<ul> <li>Type: <code>array</code></li> <li>Description: A list of global persona definitions relevant across the journey. Corresponds to 'persona_global' in EBNF.</li> </ul>"},{"location":"spec/json-schema/#comments","title":"<code>comments</code>","text":"<ul> <li>Type: <code>array</code></li> <li>Description: Top-level comments about the journey document. Corresponds to 'comment' in EBNF.</li> </ul> <p>For complete validation rules, see the Validation Guide.</p>"},{"location":"spec/language-overview/","title":"Language Overview","text":"<p>Experience Notation is a plain-text, structured language for modelling human experiences across systems, services and scenarios. It is designed to be both human-friendly and machine-parseable, offering a formal yet flexible way to define events, actions, personas, and contextual dynamics.</p>"},{"location":"spec/language-overview/#purpose","title":"Purpose","text":"<p>The language is built to:</p> <ul> <li>Capture the complexity of human experience in a consistent format</li> <li>Support simulation, analysis, testing, and design</li> <li>Enable collaboration across disciplines (UX, AI, policy, research)</li> </ul> <p>Experience Notation bridges the gap between unstructured user stories and fully automated simulation or verification frameworks.</p>"},{"location":"spec/language-overview/#syntax-style","title":"Syntax Style","text":"<p>Experience Notation uses indentation-based, declarative syntax. It is designed to resemble readable outline-style prose:</p> <pre><code>Event: Login Attempt\n  Step: Enter password\n    User: Returning User\n    Action: Types incorrect password\n    UI-Element: Login form\n    Conditional:\n      IF: Password incorrect\n      THEN: Show error\n      ELSE: Proceed to dashboard\n</code></pre> <p>The syntax follows rules defined in an EBNF grammar.</p>"},{"location":"spec/language-overview/#file-header","title":"File Header","text":"<p>Each <code>.expn</code> file starts with a required header block:</p> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Multi-Agent Access Control\nJourney-Description: Interaction flow involving multiple user roles\n</code></pre> <p>These fields define which syntax and grammar version is used and provide a description of the journey being modelled.</p>"},{"location":"spec/language-overview/#hierarchy-and-structure","title":"Hierarchy and Structure","text":"<p>The language is structured hierarchically:</p> <ul> <li>A journey contains one or more Events</li> <li>Each Event contains one or more Steps, optionally Personas, Disruptions, Parallel Events, etc.</li> <li>Each Step contains properties like <code>User</code>, <code>Action</code>, <code>UI-Element</code>, and optionally <code>Conditional</code>, <code>Metrics</code>, and <code>Tags</code></li> </ul> <pre><code>Event: Checkout\n  Step: Add Item to Basket\n    User: Shopper\n    Action: Clicks add button\n    UI-Element: Product Page\n</code></pre>"},{"location":"spec/language-overview/#extensibility","title":"Extensibility","text":"<p>Experience Notation allows:</p> <ul> <li>Inline and external <code>Persona</code> definitions</li> <li>Metadata via <code>Meta:</code> and <code>Tag:</code></li> <li>Conditional branches (<code>IF</code>, <code>THEN</code>, <code>ELSE</code>)</li> <li>Cross-references via <code>Ref:</code> and <code>ID:</code></li> <li>Support for context modelling (<code>Environmental-Factors</code>, <code>Disruption</code>, <code>Parallel-Events</code>)</li> </ul>"},{"location":"spec/language-overview/#validity-and-compatibility","title":"Validity and Compatibility","text":"<p>Experience Notation files are valid when:</p> <ul> <li>They conform to the EBNF grammar</li> <li>They pass structural validation against the JSON Schema</li> </ul> <p>Tools and validators (in progress) will allow automated checking and transformation of <code>.expn</code> files.</p> <p>Continue to EBNF Grammar to see the formal structure.</p>"},{"location":"spec/validation/","title":"Validation Guide","text":"<p>This guide explains how to validate <code>.expn</code> files written in Experience Notation using the formal grammar and JSON Schema.</p> <p>Validation ensures that your documents are syntactically correct and structurally compliant, improving reliability, consistency, and tool support.</p>"},{"location":"spec/validation/#tooling-status","title":"Tooling Status","text":"<p>\u26a0 Validation tools for Experience Notation are currently under development. Follow the GitHub roadmap or join Discussions for updates.</p>"},{"location":"spec/validation/#1-ebnf-grammar-validation","title":"1. EBNF Grammar Validation","text":"<p>Experience Notation\u2019s syntax is defined using an EBNF grammar, which must be interpreted via a parser.</p> <p>While a reference implementation is in progress, early adopters can:</p> <ul> <li> <p>Use parser generators such as:</p> </li> <li> <p><code>lark</code> (Python)</p> </li> <li><code>nearley</code> (JavaScript)</li> <li><code>ANTLR</code> (multi-language)</li> <li>Validate indentation and element structure manually</li> </ul>"},{"location":"spec/validation/#manual-validation-tips","title":"Manual Validation Tips","text":"<ul> <li>Use two spaces for indentation</li> <li>Ensure all required headers are present at the top</li> <li>Maintain correct ordering of elements like <code>Event</code>, <code>Step</code>, <code>Persona</code></li> <li>Use consistent capitalisation (e.g. <code>User:</code> not <code>user:</code>)</li> <li>Follow a known valid example as a template</li> </ul>"},{"location":"spec/validation/#1-json-schema-validation","title":"1. JSON Schema Validation","text":"<p>Experience Notation is validated using a JSON Schema, which defines:</p> <ul> <li>Required fields</li> <li>Data types (string, array, object)</li> <li>Enumerated values</li> <li>Format constraints</li> </ul>"},{"location":"spec/validation/#validate-using-cli-tools","title":"Validate using CLI tools","text":"<pre><code>npx ajv-cli validate -s experience-notation.schema.json -d my-journey.json\n</code></pre>"},{"location":"spec/validation/#validate-using-python","title":"Validate using Python","text":"<pre><code>import json\nfrom jsonschema import validate\n\nwith open(\"experience-notation.schema.json\") as f:\n    schema = json.load(f)\nwith open(\"my-journey.json\") as f:\n    instance = json.load(f)\n\nvalidate(instance=instance, schema=schema)\n</code></pre>"},{"location":"spec/validation/#json-schema-in-editors","title":"JSON Schema in Editors","text":"<p>Most modern editors (e.g. VS Code) support <code>$schema</code> declarations:</p> <pre><code>{\n  \"$schema\": \"https://schemas.experience-notation.com/experience-notation.schema@v1.1.0\",\n  \"Journey-Title\": \"My Journey\"\n}\n</code></pre> <p>This enables:</p> <ul> <li>Autocompletion</li> <li>Inline validation</li> <li>Structural guidance</li> </ul>"},{"location":"tutorials/advanced-personas/","title":"Module 4: Advanced Personas","text":"<p>This module explores how to model advanced personas, including multiple personas, persona traits, and external persona referencing.</p>"},{"location":"tutorials/advanced-personas/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>Define multiple personas in a journey</li> <li>Link steps to external or global personas</li> <li>Express motivations, adaptations, and emotional reactions</li> <li>Model personas outside of events using global persona blocks</li> </ul>"},{"location":"tutorials/advanced-personas/#global-vs-local-personas","title":"Global vs Local Personas","text":"<p>Global personas are declared at the top level, outside any event. These are reusable across the file and can be referenced within steps or other personas.</p> <pre><code>Persona: Registered User\n  Traits: { age_group=\"30s\", familiarity=\"high\" }\n  Experience: Feels confident navigating interface\n</code></pre> <p>Local personas appear inside an event. They reflect an experience specific to a given context.</p> <pre><code>Event: Purchase Completion\n  Step: Confirm order\n    User: Buyer\n    Action: Reviews order and confirms\n    UI-Element: Checkout Page\n\n  Persona: Buyer\n    Experience: Relieved the process was quick\n    Metrics: { satisfaction=9 }\n</code></pre>"},{"location":"tutorials/advanced-personas/#scenario-1-reusing-external-persona","title":"Scenario 1: Reusing External Persona","text":"TaskAnswer <pre><code>Declare a persona globally, then refer to them in multiple events.\n</code></pre> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Shopping Experience\n\nPersona: Frequent Shopper\n  Traits: { loyalty_status=\"Gold\" }\n  Experience: Feels confident using the mobile app\n\nEvent: Browse Products\n  Step: Search catalogue\n    User: Frequent Shopper\n    Action: Enters keywords\n    UI-Element: Search Bar\n\nEvent: Add to Cart\n  Step: Select product\n    User: Frequent Shopper\n    Action: Taps 'Add to Cart'\n    UI-Element: Product Page\n</code></pre>"},{"location":"tutorials/advanced-personas/#scenario-2-adaptation-and-emotional-response","title":"Scenario 2: Adaptation and Emotional Response","text":"TaskAnswer <pre><code>Show how a persona changes as a result of an event.\n</code></pre> <pre><code>Event: Receive Negative Feedback\n  Step: Read review\n    User: Product Owner\n    Action: Reads user complaint\n    UI-Element: Admin Dashboard\n\n  Persona: Product Owner\n    Adaptation: Becomes more cautious about future releases\n    Experience: Disappointed but reflective\n    Metrics: { mood=\"low\" }\n</code></pre>"},{"location":"tutorials/advanced-personas/#best-practices","title":"Best Practices","text":"<ul> <li>Use global personas when referencing the same individual across multiple events</li> <li>Adaptations describe changes in attitude or strategy</li> <li>Combine <code>Experience:</code> and <code>Metrics:</code> to capture both subjective and quantifiable states</li> </ul> <p>Next: Module 5: Conditional Logic &amp; Branching.</p>"},{"location":"tutorials/beginner/","title":"Module 2: Beginner Scenarios","text":"<p>This module introduces simple modelling patterns using Experience Notation. You\u2019ll apply the core syntax learned in Module 1 to represent realistic experience flows.</p>"},{"location":"tutorials/beginner/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>Represent multiple steps within a single event</li> <li>Use comments to explain decisions</li> <li>Practise consistent indentation and formatting</li> <li>Begin narrating user experience in a structured form</li> </ul>"},{"location":"tutorials/beginner/#scenario-1-contact-form","title":"Scenario 1: Contact Form","text":"<p>Imagine a website where a user fills in a contact form.</p> TaskAnswer <pre><code>Model the following steps:\n- A user types a message\n- Clicks the send button\n- Sees a confirmation message\n</code></pre> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Contact Form Submission\n\nEvent: Submit Message\n  Step: Compose message\n    User: Visitor\n    Action: Types message into textarea\n    UI-Element: Contact Form\n\n  Step: Send message\n    User: Visitor\n    Action: Clicks send button\n    UI-Element: Contact Form\n\n  Step: Show confirmation\n    User: Visitor\n    Action: Sees confirmation message\n    UI-Element: Web Page\n</code></pre>"},{"location":"tutorials/beginner/#scenario-2-password-reset-flow","title":"Scenario 2: Password Reset Flow","text":"<p>This exercise introduces a slightly longer sequence.</p> TaskAnswer <pre><code>Model a password reset process:\n- User clicks \"Forgot Password\"\n- Receives an email\n- Clicks the reset link\n- Enters a new password\n</code></pre> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Password Reset\nJourney-Description: A user resets a forgotten password\n\nEvent: Password Reset Request\n  Step: Initiate reset\n    User: Returning User\n    Action: Clicks 'Forgot Password'\n    UI-Element: Login Page\n\n  Step: Receive email\n    User: Returning User\n    Action: Checks inbox for password reset\n    UI-Element: Email Client\n\n  Step: Follow reset link\n    User: Returning User\n    Action: Clicks password reset link\n    UI-Element: Email Client\n\n  Step: Enter new password\n    User: Returning User\n    Action: Sets new password\n    UI-Element: Reset Form\n</code></pre>"},{"location":"tutorials/beginner/#best-practices","title":"Best Practices","text":"<ul> <li>Keep steps concise and action-driven</li> <li>Use comments (<code>#</code>) to explain specific behaviours if needed</li> <li>Maintain consistent user naming throughout the journey</li> </ul> <p>Next up: Module 3: Intermediate Modelling, where you\u2019ll explore personas, nested fields, and contextual complexity.</p>"},{"location":"tutorials/conditional/","title":"Module 5: Conditional Logic &amp; Branching","text":"<p>This module focuses on how to represent branching logic using the <code>Conditional:</code> block in Experience Notation. You\u2019ll learn how to model decision points, alternate paths, and structured IF\u2013THEN\u2013ELSE expressions.</p>"},{"location":"tutorials/conditional/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>Use the <code>Conditional:</code> block within steps</li> <li>Distinguish between IF, THEN, and ELSE</li> <li>Apply conditional logic to model both positive and negative paths</li> <li>Keep logic clear and readable using consistent formatting</li> </ul>"},{"location":"tutorials/conditional/#basic-conditional-structure","title":"Basic Conditional Structure","text":"<pre><code>Conditional:\n  IF: user input is invalid\n  THEN: display error message\n  ELSE: proceed to next step\n</code></pre> <p>A <code>Conditional:</code> block must:</p> <ul> <li>Be indented inside a <code>Step:</code></li> <li>Include at least <code>IF:</code> and <code>THEN:</code> lines</li> <li>Optionally include <code>ELSE:</code></li> </ul>"},{"location":"tutorials/conditional/#scenario-1-form-validation","title":"Scenario 1: Form Validation","text":"TaskAnswer <pre><code>Model a form submission step with conditional feedback based on input.\n</code></pre> <pre><code>Event: Submit Form\n  Step: Enter email address\n    User: Guest\n    Action: Clicks submit button\n    UI-Element: Signup Form\n    Conditional:\n      IF: email field is empty\n      THEN: display validation error\n      ELSE: show success message\n</code></pre>"},{"location":"tutorials/conditional/#scenario-2-payment-status","title":"Scenario 2: Payment Status","text":"TaskAnswer <pre><code>Represent a conditional flow for a payment process where the outcome depends on success.\n</code></pre> <pre><code>Event: Process Payment\n  Step: Submit card details\n    User: Buyer\n    Action: Clicks \"Pay Now\"\n    UI-Element: Checkout Form\n    Conditional:\n      IF: payment fails\n      THEN: display failure message\n      ELSE: show confirmation screen\n</code></pre>"},{"location":"tutorials/conditional/#best-practices","title":"Best Practices","text":"<ul> <li>Keep conditions readable and domain-relevant</li> <li>Avoid overly complex or deeply nested conditionals</li> <li>Use <code>THEN:</code> and <code>ELSE:</code> outcomes that are clear and actionable</li> </ul> <p>Next: Module 6: Final Assessment.</p>"},{"location":"tutorials/final-assessment/","title":"Module 6: Final Assessment","text":"<p>This final module gives you an opportunity to apply everything you\u2019ve learned so far. You will model a complete experience using headers, events, steps, personas, conditionals, and annotations.</p>"},{"location":"tutorials/final-assessment/#assessment-overview","title":"Assessment Overview","text":"<p>In this task, you will model a user journey for an online ticket booking system. The user selects an event, provides personal details, chooses a seat, and completes payment. You will include conditional logic for success and failure, and at least one persona with metrics.</p>"},{"location":"tutorials/final-assessment/#assessment-instructions","title":"Assessment Instructions","text":"<p>Create a valid <code>.expn</code> file that includes:</p> <ul> <li>Proper header fields</li> <li>At least 2 events with multiple steps each</li> <li>A <code>Conditional:</code> block to handle alternate flows</li> <li>One global or inline <code>Persona:</code></li> <li>Use of <code>UI-Element:</code>, <code>Meta:</code>, or <code>Tag:</code> where relevant</li> </ul>"},{"location":"tutorials/final-assessment/#example-reference-partial-only","title":"Example Reference (Partial Only)","text":"<p>Use this as inspiration \u2014 your answer may vary in detail and structure.</p> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Ticket Booking\nJourney-Description: A user purchases a ticket for a live event\n\nPersona: Event Attendee\n  Traits: { loyalty=\"returning\" }\n  Experience: Enjoys smooth browsing\n\nEvent: Browse Events\n  Step: Search for events\n    User: Event Attendee\n    Action: Types query in search box\n    UI-Element: Search Bar\n    Tag: [search, navigation]\n\n  Step: View event page\n    User: Event Attendee\n    Action: Reads description and selects event\n    UI-Element: Event Details Page\n\nEvent: Book Ticket\n  Step: Choose seat\n    User: Event Attendee\n    Action: Selects preferred seat from map\n    UI-Element: Seating Chart\n\n  Step: Submit payment\n    User: Event Attendee\n    Action: Enters payment details\n    UI-Element: Payment Form\n    Conditional:\n      IF: payment fails\n      THEN: display error message\n      ELSE: show confirmation\n</code></pre>"},{"location":"tutorials/final-assessment/#review","title":"Review","text":"<p>Use this exercise to test your understanding of:</p> <ul> <li>Correct syntax and indentation</li> <li>Logical structuring of actions and decisions</li> <li>Modelling personas, experience, and outcomes</li> </ul> <p>Review your <code>.expn</code> file by reading it aloud or validating it against the EBNF grammar.</p> <p>You\u2019ve completed the tutorial sequence. Congratulations!</p>"},{"location":"tutorials/intermediate/","title":"Module 3: Intermediate Modelling","text":"<p>This module introduces more advanced constructs including nested fields, conditional logic, and the use of <code>Persona:</code> blocks to represent perspectives, motivations, and experiences.</p>"},{"location":"tutorials/intermediate/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>Model <code>Persona:</code> blocks within or outside events</li> <li>Use <code>Conditional:</code> logic blocks for branching</li> <li>Add <code>Metrics:</code> and <code>Meta:</code> fields</li> <li>Structure more complex event flows</li> </ul>"},{"location":"tutorials/intermediate/#scenario-1-persona-within-an-event","title":"Scenario 1: Persona within an Event","text":"TaskAnswer <pre><code>Model a login journey that includes a persona who expresses a reaction after successful login.\n</code></pre> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Logged-In Persona Feedback\n\nEvent: Login Success\n  Step: Login attempt\n    User: Returning User\n    Action: Enters correct credentials\n    UI-Element: Login Form\n\n  Persona: Returning User\n    Experience: Feels confident after successful login\n    Metrics: { confidence=high }\n</code></pre>"},{"location":"tutorials/intermediate/#scenario-2-conditional-logic","title":"Scenario 2: Conditional Logic","text":"TaskAnswer <pre><code>Create an event with a conditional outcome:\n- User submits form\n- IF required fields are empty, show error\n- ELSE submit the form\n</code></pre> <pre><code>Event: Form Submission\n  Step: Submit details\n    User: Guest\n    Action: Clicks submit button\n    UI-Element: Registration Form\n    Conditional:\n      IF: Required fields are empty\n      THEN: Show error message\n      ELSE: Proceed with submission \n</code></pre>"},{"location":"tutorials/intermediate/#scenario-3-adding-metadata","title":"Scenario 3: Adding Metadata","text":"TaskAnswer <pre><code>Use `Meta:` and `Tag:` fields to annotate steps for clarity.\n</code></pre> <pre><code>Event: Newsletter Signup\n  Step: Fill email field\n    User: Visitor\n    Action: Enters email address\n    UI-Element: Signup Form\n    Meta: { source=\"homepage\" }\n    Tag: [conversion, email]\n</code></pre>"},{"location":"tutorials/intermediate/#best-practices","title":"Best Practices","text":"<ul> <li>Use personas to reflect internal states, feedback, or goals</li> <li>Apply <code>Metrics:</code> to quantify subjective experiences</li> <li>Reserve <code>Conditional:</code> blocks for simple branching logic (do not nest them recursively)</li> </ul> <p>Next: Module 4: Advanced Personas, where we explore external personas and cross-referenced experiences.</p>"},{"location":"tutorials/syntax-primer/","title":"Module 1: Syntax Primer","text":"<p>This module introduces the core syntax of Experience Notation. You\u2019ll learn how to structure basic experience flows using the indentation-based format defined by the EBNF grammar.</p>"},{"location":"tutorials/syntax-primer/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this module, you will be able to:</p> <ul> <li>Structure a valid <code>.expn</code> file with headers</li> <li>Define <code>Event</code> and <code>Step</code> blocks</li> <li>Use <code>User</code>, <code>Action</code>, and <code>UI-Element</code> elements correctly</li> <li>Understand the importance of indentation and consistency</li> </ul>"},{"location":"tutorials/syntax-primer/#file-header","title":"File Header","text":"<p>All <code>.expn</code> files begin with a header that defines versioning and context:</p> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\nJourney-Title: Basic Login Flow\nJourney-Description: A simple login experience for returning users\n</code></pre> <p>These fields are required and must appear at the top of every file.</p>"},{"location":"tutorials/syntax-primer/#events-and-steps","title":"Events and Steps","text":"<p>The core structure of Experience Notation is built from <code>Event:</code> and <code>Step:</code> blocks. Each event represents a significant moment in the journey. Steps are actions that occur within that event.</p> <pre><code>Event: Login Attempt\n  Step: Enter credentials\n    User: Returning User\n    Action: Types in username and password\n    UI-Element: Login Form\n</code></pre>"},{"location":"tutorials/syntax-primer/#indentation-rules","title":"Indentation Rules","text":"<ul> <li>Use 2 spaces for each level of nesting</li> <li>Keywords must be capitalised exactly as defined (<code>Step:</code>, not <code>step:</code>)</li> <li>Do not use tabs</li> </ul>"},{"location":"tutorials/syntax-primer/#descriptive-fields","title":"Descriptive Fields","text":"<p>Each step typically contains the following:</p> <ul> <li><code>User:</code> \u2014 Who is acting in this step</li> <li><code>Action:</code> \u2014 What the user does</li> <li><code>UI-Element:</code> \u2014 The interface or medium used</li> </ul> <pre><code>Step: Confirm email\n  User: New Registrant\n  Action: Clicks verification link\n  UI-Element: Email Client\n</code></pre> <p>These descriptive fields help capture the user experience in a structured way.</p>"},{"location":"tutorials/syntax-primer/#comments","title":"Comments","text":"<p>You may use comments in your <code>.expn</code> file for annotation:</p> <pre><code># This step represents the point of highest drop-off\nStep: Provide payment details\n  User: Guest\n  Action: Enters credit card info\n  UI-Element: Payment Form\n</code></pre> <p>Comments start with <code>#</code> and are ignored by any parser.</p>"},{"location":"tutorials/syntax-primer/#exercise","title":"Exercise","text":"TaskAnswer <pre><code>Create a simple `.expn` file that includes:\n- A header\n- One event\n- Two steps\n- At least one UI element\n- A comment\n</code></pre> <pre><code>EBNF-Version: 1.1\nSyntax-Version: 1.0\n  Journey-Title: Newsletter Signup\nJourney-Description: A user subscribes to updates via a form\n\nEvent: Signup\n  Step: Enter email address\n    User: Visitor\n    Action: Types email in field\n    UI-Element: Signup Form\n\n  # Optional follow-up\n  Step: Confirm email receipt\n    User: Visitor\n    Action: Clicks confirmation link\n    UI-Element: Email Client\n</code></pre> <p>Continue to Module 2: Beginner Scenarios to practise simple journeys using these syntax rules.</p>"}]}